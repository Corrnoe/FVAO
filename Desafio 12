// Implementación del Árbol Binario de Búsqueda (ABB) en Java
// Clase 'Node'

class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

// Clase 'BinarySearchTree'

public class BinarySearchTree {
    private Node root;

    public BinarySearchTree() {
        root = null;
    }

    // Métodos de recorrido
    public void preOrderTraversal() {
        preOrderTraversal(root);
    }

    private void preOrderTraversal(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrderTraversal(node.left);
            preOrderTraversal(node.right);
        }
    }

    public void inOrderTraversal() {
        inOrderTraversal(root);
    }

    private void inOrderTraversal(Node node) {
        if (node != null) {
            inOrderTraversal(node.left);
            System.out.print(node.key + " ");
            inOrderTraversal(node.right);
        }
    }

    public void postOrderTraversal() {
        postOrderTraversal(root);
    }

    private void postOrderTraversal(Node node) {
        if (node != null) {
            postOrderTraversal(node.left);
            postOrderTraversal(node.right);
            System.out.print(node.key + " ");
        }
    }

    // Método de impresión
    public void printTree() {
        System.out.println("Árbol Binario de Búsqueda:");
        printTree(root, 0);
    }

    private void printTree(Node node, int depth) {
        if (node != null) {
            printTree(node.right, depth + 1);
            for (int i = 0; i < depth; i++) {
                System.out.print("  ");
            }
            System.out.println(node.key);
            printTree(node.left, depth + 1);
        }
    }

    // Métodos de inserción y borrado (por implementar)
    // ...

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        // Insertar elementos de prueba
        tree.root = new Node(50);
        tree.root.left = new Node(30);
        tree.root.right = new Node(70);
        tree.root.left.left = new Node(20);
        tree.root.left.right = new Node(40);

        // Realizar pruebas de recorridos e impresión
        tree.preOrderTraversal();
        System.out.println();
        tree.inOrderTraversal();
        System.out.println();
        tree.postOrderTraversal();
        System.out.println();
        tree.printTree();
    }
}
