// Creando un archivo solution.h que contenga los prototipos de las funciones:

// solution.h
#ifndef SOLUTION_H
#define SOLUTION_H

void bubbleSort(int arr[], int n);

#endif

// Crea un archivo solution.c que implemente las funciones y mida el tiempo y el número de operaciones:

// solution.c
#include "solution.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *xp, int *yp) {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort(int arr[], int n) {
    int i, j;
    int ops = 0;  // Contador de operaciones básicas

    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            ops++;  // Incrementa el contador de operaciones básicas
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }

    // Imprime el número de operaciones básicas
    printf("Número de operaciones básicas: %d\n", ops);
}

int main() {
    const int n = 10;  // Tamaño del arreglo
    int arr[n];        // Arreglo a ordenar
    srand(time(NULL));

    // Inicializa el arreglo con valores aleatorios
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100;
    }

    // Mide el tiempo de ejecución
    clock_t start = clock();
    
    // Llama al algoritmo de ordenación
    bubbleSort(arr, n);

    clock_t end = clock();
    double cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    // Imprime el tiempo de ejecución
    printf("Tiempo de ejecución: %f segundos\n", cpu_time_used);

    // Imprime el arreglo ordenado
    printf("Arreglo ordenado:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}
